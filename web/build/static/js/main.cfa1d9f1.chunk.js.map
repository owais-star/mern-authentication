{"version":3,"sources":["components/signup/SignupForm.jsx","components/signup/Signup.jsx","components/message/Message.jsx","components/login/LoginForm.jsx","components/login/login.jsx","components/dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["RegisterForm","useState","showPassword","setShowPassword","RegisterSchema","Yup","shape","firstName","min","max","required","lastName","email","password","formik","useFormik","initialValues","validationSchema","onSubmit","values","console","log","errors","touched","handleSubmit","isSubmitting","getFieldProps","value","autoComplete","noValidate","Stack","spacing","direction","xs","sm","TextField","fullWidth","label","error","Boolean","helperText","type","InputProps","endAdornment","InputAdornment","position","IconButton","edge","onClick","prev","icon","eyeFill","eyeOffFill","LoadingButton","size","variant","loading","Signup","BasicAlerts","props","sx","width","Alert","severity","message","Login","history","useHistory","messageBar","setMessageBar","user","LoginSchema","remember","setTimeout","push","show","alignItems","justifyContent","my","FormControlLabel","control","Checkbox","checked","Link","component","RouterLink","to","Dashboar","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfa1d9f1.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\nimport eyeFill from '@iconify/icons-eva/eye-fill';\r\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\r\nimport { useNavigate } from 'react-router-dom';\r\n// material\r\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function RegisterForm() {\r\n//   const navigate = useNavigate();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    firstName: Yup.string()\r\n      .min(2, 'Too Short!')\r\n      .max(50, 'Too Long!')\r\n      .required('First name required'),\r\n    lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    password: Yup.string().required('Password is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      password: ''\r\n    },\r\n    validationSchema: RegisterSchema,\r\n    onSubmit: (values) => {\r\n    //   navigate('/dashboard', { replace: true });\r\n    console.log(values)\r\n    }\r\n  });\r\n\r\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack spacing={3}>\r\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"First name\"\r\n              {...getFieldProps('firstName')}\r\n              error={Boolean(touched.firstName && errors.firstName)}\r\n              helperText={touched.firstName && errors.firstName}\r\n            />\r\n\r\n            <TextField\r\n              fullWidth\r\n              label=\"Last name\"\r\n              {...getFieldProps('lastName')}\r\n              error={Boolean(touched.lastName && errors.lastName)}\r\n              helperText={touched.lastName && errors.lastName}\r\n            />\r\n          </Stack>\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"username\"\r\n            type=\"email\"\r\n            label=\"Email address\"\r\n            {...getFieldProps('email')}\r\n            error={Boolean(touched.email && errors.email)}\r\n            helperText={touched.email && errors.email}\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"current-password\"\r\n            type={showPassword ? 'text' : 'password'}\r\n            label=\"Password\"\r\n            {...getFieldProps('password')}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\r\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n          />\r\n\r\n          <LoadingButton\r\n            fullWidth\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            loading={isSubmitting}\r\n          >\r\n            Register\r\n          </LoadingButton>\r\n        </Stack>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}","import {\r\n\r\n    Switch,\r\n    Route,\r\n    Link\r\n  \r\n  } from \"react-router-dom\";\r\n  import RegisterForm from \"./SignupForm\"\r\n  function Signup() {\r\n  \r\n    return (\r\n      <>\r\n      <RegisterForm/>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default Signup;\r\n  \r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport Alert from '@mui/material/Alert';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport default function BasicAlerts(props) {\r\n  return (\r\n    <Stack sx={{ width: '100%' }} spacing={2}>\r\n      <Alert variant=\"filled\" severity= {props.type}>\r\n        {props.message}\r\n      </Alert>\r\n    </Stack>\r\n  );\r\n}","import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\nimport { Icon } from '@iconify/react';\r\nimport eyeFill from '@iconify/icons-eva/eye-fill';\r\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\r\nimport Message from \"../message/Message\"\r\n// material\r\nimport {\r\n  Link,\r\n  Stack,\r\n  Checkbox,\r\n  TextField,\r\n  IconButton,\r\n  InputAdornment,\r\n  FormControlLabel,\r\n  getImageListItemBarUtilityClass\r\n} from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Login() {\r\n  const history = useHistory();\r\n  const [messageBar, setMessageBar] = useState(\"\")\r\n  const [showPassword, setShowPassword] = useState();\r\n  let user = {\r\n    email : \"owais@gmail.com\",\r\n    password : \"qwertyuiop\"\r\n  }\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    password: Yup.string().required('Password is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      remember: true\r\n    },\r\n    validationSchema: LoginSchema,\r\n    onSubmit: (values) => {\r\n      \r\n      if(values.email === user.email && values.password === user.password ){\r\n        setMessageBar(true)\r\n        setTimeout(() => {\r\n          history.push(\"/profile\")\r\n        }, 1000);\r\n      }else{\r\n        setMessageBar(false)\r\n        setTimeout(() => {\r\n          setMessageBar(\"\")\r\n        }, 3000);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, touched, values, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  const handleShowPassword = () => {\r\n    setShowPassword((show) => !show);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    \r\n    {messageBar === true ? <Message type=\"success\" message=\"Welcome\" /> : \"\"}\r\n      {messageBar === false ? (\r\n        \r\n          <Message type=\"error\" message=\"Invalid email or password\" />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    \r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack spacing={3}>\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"username\"\r\n            type=\"email\"\r\n            label=\"Email address\"\r\n            {...getFieldProps('email')}\r\n            error={Boolean(touched.email && errors.email)}\r\n            helperText={touched.email && errors.email}\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete=\"current-password\"\r\n            type={showPassword ? 'text' : 'password'}\r\n            label=\"Password\"\r\n            {...getFieldProps('password')}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\r\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n          />\r\n        </Stack>\r\n\r\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\r\n          <FormControlLabel\r\n            control={<Checkbox {...getFieldProps('remember')} checked={values.remember} />}\r\n            label=\"Remember me\"\r\n          />\r\n\r\n          <Link component={RouterLink} variant=\"subtitle2\" to=\"#\">\r\n            Forgot password?\r\n          </Link>\r\n        </Stack>\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          // loading={isSubmitting}\r\n        >\r\n          Login\r\n        </LoadingButton>\r\n      </Form>\r\n    </FormikProvider>\r\n    </>\r\n  );\r\n}","import LoginForm from \"./LoginForm\"\r\n\r\n\r\nfunction Login(){\r\n  return(\r\n    <LoginForm/>\r\n  )\r\n}\r\n\r\nexport default Login;","import {\r\n\r\n    Switch,\r\n    Route,\r\n    Link\r\n  \r\n  } from \"react-router-dom\";\r\n  \r\n  function Dashboar() {\r\n  \r\n    return (\r\n      <>\r\n      <h1 >welcome to Dashboard</h1>\r\n      </>\r\n    );\r\n  }\r\n  \r\nexport default Dashboar;","import React from \"react\";\nimport Signup from \"./components/signup/Signup\";\nimport Login from \"./components/login/login\";\nimport Dashboar from \"./components/dashboard/Dashboard\";\nimport {\n\n  Switch,\n  Route,\n  Link\n\n} from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\">\n          <Signup />\n        </Route>\n\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n\n        <Route path=\"/profile\">\n          <Dashboar />\n        </Route>\n      </Switch>\n    </>\n\n\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  \n} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}